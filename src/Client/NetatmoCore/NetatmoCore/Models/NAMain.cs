// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace netatmocore.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class NAMain
    {
        /// <summary>
        /// Initializes a new instance of the NAMain class.
        /// </summary>
        public NAMain()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NAMain class.
        /// </summary>
        /// <param name="type">Included in every device or module. It defines
        /// the type of the device/module. Its values are among :
        /// NAMain : for the base station
        /// NAModule1 : for the outdoor module
        /// NAModule4 : for the additionnal indoor module
        /// NAModule3 : for the rain gauge module
        /// NAPlug : for the thermostat relay/plug
        /// NATherm1 : for the thermostat module
        /// </param>
        /// <param name="dashboardData">It contains all the measurements that
        /// can be displayed on the dashboard</param>
        /// <param name="wifiStatus">It contains the current wifi status. The
        /// different thresholds to take into account are
        /// RSSI_THRESHOLD_0 = 86 bad signal
        /// RSSI_THRESHOLD_1 = 71 middle quality signal
        /// RSSI_THRESHOLD_2 = 56 good signal
        /// </param>
        public NAMain(string _id = default(string), string cipherId = default(string), int? lastStatusStore = default(int?), IList<NAStationModule> modules = default(IList<NAStationModule>), NAPlace place = default(NAPlace), string stationName = default(string), string type = default(string), NADashboardData dashboardData = default(NADashboardData), IList<string> dataType = default(IList<string>), bool? co2Calibrating = default(bool?), int? dateSetup = default(int?), int? lastSetup = default(int?), string moduleName = default(string), int? firmware = default(int?), int? lastUpgrade = default(int?), int? wifiStatus = default(int?))
        {
            this._id = _id;
            CipherId = cipherId;
            LastStatusStore = lastStatusStore;
            Modules = modules;
            Place = place;
            StationName = stationName;
            Type = type;
            DashboardData = dashboardData;
            DataType = dataType;
            Co2Calibrating = co2Calibrating;
            DateSetup = dateSetup;
            LastSetup = lastSetup;
            ModuleName = moduleName;
            Firmware = firmware;
            LastUpgrade = lastUpgrade;
            WifiStatus = wifiStatus;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "_id")]
        public string _id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "cipher_id")]
        public string CipherId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "last_status_store")]
        public int? LastStatusStore { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "modules")]
        public IList<NAStationModule> Modules { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "place")]
        public NAPlace Place { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "station_name")]
        public string StationName { get; set; }

        /// <summary>
        /// Gets or sets included in every device or module. It defines the
        /// type of the device/module. Its values are among :
        /// NAMain : for the base station
        /// NAModule1 : for the outdoor module
        /// NAModule4 : for the additionnal indoor module
        /// NAModule3 : for the rain gauge module
        /// NAPlug : for the thermostat relay/plug
        /// NATherm1 : for the thermostat module
        ///
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets it contains all the measurements that can be displayed
        /// on the dashboard
        /// </summary>
        [JsonProperty(PropertyName = "dashboard_data")]
        public NADashboardData DashboardData { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "data_type")]
        public IList<string> DataType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "co2_calibrating")]
        public bool? Co2Calibrating { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "date_setup")]
        public int? DateSetup { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "last_setup")]
        public int? LastSetup { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "module_name")]
        public string ModuleName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "firmware")]
        public int? Firmware { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "last_upgrade")]
        public int? LastUpgrade { get; set; }

        /// <summary>
        /// Gets or sets it contains the current wifi status. The different
        /// thresholds to take into account are
        /// RSSI_THRESHOLD_0 = 86 bad signal
        /// RSSI_THRESHOLD_1 = 71 middle quality signal
        /// RSSI_THRESHOLD_2 = 56 good signal
        ///
        /// </summary>
        [JsonProperty(PropertyName = "wifi_status")]
        public int? WifiStatus { get; set; }

    }
}
