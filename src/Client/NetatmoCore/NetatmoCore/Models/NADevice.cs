// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace netatmocore.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class NADevice
    {
        /// <summary>
        /// Initializes a new instance of the NADevice class.
        /// </summary>
        public NADevice()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NADevice class.
        /// </summary>
        /// <param name="modules">It lists which modules are linked with this
        /// device</param>
        /// <param name="type">Included in every device or module. It defines
        /// the type of the device/module. Its values are among :
        /// NAMain : for the base station
        /// NAModule1 : for the outdoor module
        /// NAModule4 : for the additionnal indoor module
        /// NAModule3 : for the rain gauge module
        /// NAPlug : for the thermostat relay/plug
        /// NATherm1 : for the thermostat module
        /// </param>
        /// <param name="wifiStatus">It contains the current wifi status. The
        /// different thresholds to take into account are
        /// RSSI_THRESHOLD_0 = 86 bad signal
        /// RSSI_THRESHOLD_1 = 71 middle quality signal
        /// RSSI_THRESHOLD_2 = 56 good signal
        /// </param>
        /// <param name="dashboardData">It contains all the measurements that
        /// can be displayed on the dashboard</param>
        public NADevice(string _id = default(string), int? behavior = default(int?), string cipherId = default(string), NADate dateSetup = default(NADate), int? firmware = default(int?), int? hwVersion = default(int?), NAHeatingSystem heatingSystem = default(NAHeatingSystem), NAHouseModel houseModel = default(NAHouseModel), string ip = default(string), int? lastFwUpdate = default(int?), int? lastRadioStore = default(int?), int? lastStatusStore = default(int?), int? lastUpgrade = default(int?), string moduleName = default(string), IList<string> modules = default(IList<string>), NAPlace place = default(NAPlace), object setpoint = default(object), int? setpointDefaultDuration = default(int?), IDictionary<string, IList<NAObject>> setpointOrder = default(IDictionary<string, IList<NAObject>>), bool? publicExtData = default(bool?), string stationName = default(string), IDictionary<string, NAThermProgram> thermProgram = default(IDictionary<string, NAThermProgram>), IDictionary<string, IList<NAThermProgram>> thermProgramBackup = default(IDictionary<string, IList<NAThermProgram>>), IDictionary<string, IList<NAObject>> thermProgramOrder = default(IDictionary<string, IList<NAObject>>), string type = default(string), IList<string> userOwner = default(IList<string>), bool? udpConn = default(bool?), int? wifiStatus = default(int?), bool? newFeatureAvail = default(bool?), bool? firstPidAvail = default(bool?), NADashboardData dashboardData = default(NADashboardData), IList<string> dataType = default(IList<string>))
        {
            this._id = _id;
            Behavior = behavior;
            CipherId = cipherId;
            DateSetup = dateSetup;
            Firmware = firmware;
            HwVersion = hwVersion;
            HeatingSystem = heatingSystem;
            HouseModel = houseModel;
            Ip = ip;
            LastFwUpdate = lastFwUpdate;
            LastRadioStore = lastRadioStore;
            LastStatusStore = lastStatusStore;
            LastUpgrade = lastUpgrade;
            ModuleName = moduleName;
            Modules = modules;
            Place = place;
            Setpoint = setpoint;
            SetpointDefaultDuration = setpointDefaultDuration;
            SetpointOrder = setpointOrder;
            PublicExtData = publicExtData;
            StationName = stationName;
            ThermProgram = thermProgram;
            ThermProgramBackup = thermProgramBackup;
            ThermProgramOrder = thermProgramOrder;
            Type = type;
            UserOwner = userOwner;
            UdpConn = udpConn;
            WifiStatus = wifiStatus;
            NewFeatureAvail = newFeatureAvail;
            FirstPidAvail = firstPidAvail;
            DashboardData = dashboardData;
            DataType = dataType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "_id")]
        public string _id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "behavior")]
        public int? Behavior { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "cipher_id")]
        public string CipherId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "date_setup")]
        public NADate DateSetup { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "firmware")]
        public int? Firmware { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hw_version")]
        public int? HwVersion { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "heating_system")]
        public NAHeatingSystem HeatingSystem { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "house_model")]
        public NAHouseModel HouseModel { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ip")]
        public string Ip { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "last_fw_update")]
        public int? LastFwUpdate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "last_radio_store")]
        public int? LastRadioStore { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "last_status_store")]
        public int? LastStatusStore { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "last_upgrade")]
        public int? LastUpgrade { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "module_name")]
        public string ModuleName { get; set; }

        /// <summary>
        /// Gets or sets it lists which modules are linked with this device
        /// </summary>
        [JsonProperty(PropertyName = "modules")]
        public IList<string> Modules { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "place")]
        public NAPlace Place { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "setpoint")]
        public object Setpoint { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "setpoint_default_duration")]
        public int? SetpointDefaultDuration { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "setpoint_order")]
        public IDictionary<string, IList<NAObject>> SetpointOrder { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "public_ext_data")]
        public bool? PublicExtData { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "station_name")]
        public string StationName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "therm_program")]
        public IDictionary<string, NAThermProgram> ThermProgram { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "therm_program_backup")]
        public IDictionary<string, IList<NAThermProgram>> ThermProgramBackup { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "therm_program_order")]
        public IDictionary<string, IList<NAObject>> ThermProgramOrder { get; set; }

        /// <summary>
        /// Gets or sets included in every device or module. It defines the
        /// type of the device/module. Its values are among :
        /// NAMain : for the base station
        /// NAModule1 : for the outdoor module
        /// NAModule4 : for the additionnal indoor module
        /// NAModule3 : for the rain gauge module
        /// NAPlug : for the thermostat relay/plug
        /// NATherm1 : for the thermostat module
        ///
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "user_owner")]
        public IList<string> UserOwner { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "udp_conn")]
        public bool? UdpConn { get; set; }

        /// <summary>
        /// Gets or sets it contains the current wifi status. The different
        /// thresholds to take into account are
        /// RSSI_THRESHOLD_0 = 86 bad signal
        /// RSSI_THRESHOLD_1 = 71 middle quality signal
        /// RSSI_THRESHOLD_2 = 56 good signal
        ///
        /// </summary>
        [JsonProperty(PropertyName = "wifi_status")]
        public int? WifiStatus { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "new_feature_avail")]
        public bool? NewFeatureAvail { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "first_pid_avail")]
        public bool? FirstPidAvail { get; set; }

        /// <summary>
        /// Gets or sets it contains all the measurements that can be displayed
        /// on the dashboard
        /// </summary>
        [JsonProperty(PropertyName = "dashboard_data")]
        public NADashboardData DashboardData { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "data_type")]
        public IList<string> DataType { get; set; }

    }
}
