// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace netatmocore.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class NADashboardData
    {
        /// <summary>
        /// Initializes a new instance of the NADashboardData class.
        /// </summary>
        public NADashboardData()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NADashboardData class.
        /// </summary>
        /// <param name="temperature">Last temperature measure @ time_utc (in
        /// 째C)</param>
        /// <param name="tempTrend">Temperature evolution trend</param>
        /// <param name="dateMaxTemp">Timestamp when max temperature was
        /// measured</param>
        /// <param name="dateMinTemp">Timestamp when min temperature was
        /// measured</param>
        /// <param name="minTemp">Max temperature of the day (measured @
        /// date_max_temp)</param>
        /// <param name="maxTemp">Min temperature of the day (measured @
        /// date_min_temp)</param>
        /// <param name="absolutePressure">Real measured pressure @ time_utc
        /// (in mb)</param>
        /// <param name="cO2">Last Co2 measured @ time_utc (in ppm)</param>
        /// <param name="humidity">Last humidity measured @ time_utc (in
        /// %)</param>
        /// <param name="noise">Last noise measured @ time_utc (in db)</param>
        /// <param name="pressure">Last Sea level pressure measured @ time_utc
        /// (in mb)</param>
        /// <param name="pressureTrend">Pressure evolution trend</param>
        /// <param name="rain">Last rain measured (in mm)</param>
        /// <param name="sumRain1">Amount of rain in last hour</param>
        /// <param name="sumRain24">Amount of rain today</param>
        /// <param name="windAngle">Current 5 min average wind direction
        /// measured @ time_utc (in 째)</param>
        /// <param name="gustAngle">Direction of the last 5 min highest gust
        /// wind</param>
        /// <param name="windStrength">Current 5 min average wind speed
        /// measured @ time_utc (in km/h)</param>
        /// <param name="gustStrength">Speed of the last 5 min highest gust
        /// wind</param>
        /// <param name="healthIdx">Current health index: 0 = Healthy, 1 =
        /// Fine, 2 = Fair, 3 = Poor, 4 = Unhealthy</param>
        public NADashboardData(int? timeUtc = default(int?), double? deviceId = default(double?), int? boilerOn = default(int?), int? boilerOff = default(int?), double? temperature = default(double?), string tempTrend = default(string), int? dateMaxTemp = default(int?), int? dateMinTemp = default(int?), double? minTemp = default(double?), double? maxTemp = default(double?), double? absolutePressure = default(double?), double? cO2 = default(double?), double? humidity = default(double?), double? noise = default(double?), double? pressure = default(double?), string pressureTrend = default(string), double? rain = default(double?), double? sumRain1 = default(double?), double? sumRain24 = default(double?), int? windAngle = default(int?), int? gustAngle = default(int?), int? windStrength = default(int?), int? gustStrength = default(int?), int? healthIdx = default(int?))
        {
            TimeUtc = timeUtc;
            DeviceId = deviceId;
            BoilerOn = boilerOn;
            BoilerOff = boilerOff;
            Temperature = temperature;
            TempTrend = tempTrend;
            DateMaxTemp = dateMaxTemp;
            DateMinTemp = dateMinTemp;
            MinTemp = minTemp;
            MaxTemp = maxTemp;
            AbsolutePressure = absolutePressure;
            CO2 = cO2;
            Humidity = humidity;
            Noise = noise;
            Pressure = pressure;
            PressureTrend = pressureTrend;
            Rain = rain;
            SumRain1 = sumRain1;
            SumRain24 = sumRain24;
            WindAngle = windAngle;
            GustAngle = gustAngle;
            WindStrength = windStrength;
            GustStrength = gustStrength;
            HealthIdx = healthIdx;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "time_utc")]
        public int? TimeUtc { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "device_id")]
        public double? DeviceId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BoilerOn")]
        public int? BoilerOn { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BoilerOff")]
        public int? BoilerOff { get; set; }

        /// <summary>
        /// Gets or sets last temperature measure @ time_utc (in 째C)
        /// </summary>
        [JsonProperty(PropertyName = "Temperature")]
        public double? Temperature { get; set; }

        /// <summary>
        /// Gets or sets temperature evolution trend
        /// </summary>
        [JsonProperty(PropertyName = "temp_trend")]
        public string TempTrend { get; set; }

        /// <summary>
        /// Gets or sets timestamp when max temperature was measured
        /// </summary>
        [JsonProperty(PropertyName = "date_max_temp")]
        public int? DateMaxTemp { get; set; }

        /// <summary>
        /// Gets or sets timestamp when min temperature was measured
        /// </summary>
        [JsonProperty(PropertyName = "date_min_temp")]
        public int? DateMinTemp { get; set; }

        /// <summary>
        /// Gets or sets max temperature of the day (measured @ date_max_temp)
        /// </summary>
        [JsonProperty(PropertyName = "min_temp")]
        public double? MinTemp { get; set; }

        /// <summary>
        /// Gets or sets min temperature of the day (measured @ date_min_temp)
        /// </summary>
        [JsonProperty(PropertyName = "max_temp")]
        public double? MaxTemp { get; set; }

        /// <summary>
        /// Gets or sets real measured pressure @ time_utc (in mb)
        /// </summary>
        [JsonProperty(PropertyName = "AbsolutePressure")]
        public double? AbsolutePressure { get; set; }

        /// <summary>
        /// Gets or sets last Co2 measured @ time_utc (in ppm)
        /// </summary>
        [JsonProperty(PropertyName = "CO2")]
        public double? CO2 { get; set; }

        /// <summary>
        /// Gets or sets last humidity measured @ time_utc (in %)
        /// </summary>
        [JsonProperty(PropertyName = "Humidity")]
        public double? Humidity { get; set; }

        /// <summary>
        /// Gets or sets last noise measured @ time_utc (in db)
        /// </summary>
        [JsonProperty(PropertyName = "Noise")]
        public double? Noise { get; set; }

        /// <summary>
        /// Gets or sets last Sea level pressure measured @ time_utc (in mb)
        /// </summary>
        [JsonProperty(PropertyName = "Pressure")]
        public double? Pressure { get; set; }

        /// <summary>
        /// Gets or sets pressure evolution trend
        /// </summary>
        [JsonProperty(PropertyName = "pressure_trend")]
        public string PressureTrend { get; set; }

        /// <summary>
        /// Gets or sets last rain measured (in mm)
        /// </summary>
        [JsonProperty(PropertyName = "Rain")]
        public double? Rain { get; set; }

        /// <summary>
        /// Gets or sets amount of rain in last hour
        /// </summary>
        [JsonProperty(PropertyName = "sum_rain_1")]
        public double? SumRain1 { get; set; }

        /// <summary>
        /// Gets or sets amount of rain today
        /// </summary>
        [JsonProperty(PropertyName = "sum_rain_24")]
        public double? SumRain24 { get; set; }

        /// <summary>
        /// Gets or sets current 5 min average wind direction measured @
        /// time_utc (in 째)
        /// </summary>
        [JsonProperty(PropertyName = "WindAngle")]
        public int? WindAngle { get; set; }

        /// <summary>
        /// Gets or sets direction of the last 5 min highest gust wind
        /// </summary>
        [JsonProperty(PropertyName = "GustAngle")]
        public int? GustAngle { get; set; }

        /// <summary>
        /// Gets or sets current 5 min average wind speed measured @ time_utc
        /// (in km/h)
        /// </summary>
        [JsonProperty(PropertyName = "WindStrength")]
        public int? WindStrength { get; set; }

        /// <summary>
        /// Gets or sets speed of the last 5 min highest gust wind
        /// </summary>
        [JsonProperty(PropertyName = "GustStrength")]
        public int? GustStrength { get; set; }

        /// <summary>
        /// Gets or sets current health index: 0 = Healthy, 1 = Fine, 2 = Fair,
        /// 3 = Poor, 4 = Unhealthy
        /// </summary>
        [JsonProperty(PropertyName = "health_idx")]
        public int? HealthIdx { get; set; }

    }
}
